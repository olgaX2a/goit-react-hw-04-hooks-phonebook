{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","helpers/filterContacts.js","App.js","hooks/useLocalStorage.js","index.js"],"names":["ContactForm","addContact","useState","name","setName","number","setNumber","handleChangeUserInfo","event","target","value","trim","className","onSubmit","preventDefault","contact","id","uuidv4","onChange","type","pattern","title","required","PhonebookListItem","onDeleteContact","onClick","ContactList","contacts","map","Filter","onFilter","filterValue","filterContacts","filter","normalizedFilter","toLowerCase","includes","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","setFilter","filteredContacts","some","el","alert","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.378d0719.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./ContactForm.css\";\n\nfunction ContactForm({ addContact }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChangeUserInfo = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value.trim());\n        break;\n\n      case \"number\":\n        setNumber(value.trim());\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const handleUserFormSubmit = (event) => {\n    event.preventDefault();\n    const contact = {\n      id: uuidv4(),\n      name: name,\n      number: number,\n    };\n    addContact(contact);\n    resetForm();\n  };\n\n  return (\n    <form className=\"Form\" onSubmit={handleUserFormSubmit}>\n      <label className=\"Form__label\">\n        Name\n        <input\n          onChange={handleChangeUserInfo}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label className=\"Form__label\">\n        Number\n        <input\n          onChange={handleChangeUserInfo}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className=\"Form__add-btn\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class oldContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   handleChangeUserInfo = (event) => {\n//     const { name, value } = event.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   resetForm = () => {\n//     this.setState({ name: \"\", number: \"\" });\n//   };\n\n//   handleUserFormSubmit = (event) => {\n//     event.preventDefault();\n//     this.props.handleAddContact({ ...this.state });\n//     this.resetForm();\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.handleUserFormSubmit} className=\"Form\">\n//         <label className=\"Form__label\">\n//           Name\n//           <input\n//             onChange={this.handleChangeUserInfo}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n\n//         <label className=\"Form__label\">\n//           Number\n//           <input\n//             onChange={this.handleChangeUserInfo}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\" className=\"Form__add-btn\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nexport default ContactForm;\n","import \"./ContactList.css\";\n\nconst PhonebookListItem = ({ name, number, id, onDeleteContact }) => {\n  return (\n    <li className=\"Contact__item\">\n      <p className=\"Contact__info\">{name}: </p>\n      <p className=\"Contact__info\">{number}</p>\n      <button\n        type=\"button\"\n        id={id}\n        onClick={onDeleteContact}\n        className=\"Contact__delete-btn\"\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default PhonebookListItem;\n","import PhonebookListItem from \"./ContactListItem\";\nimport \"./ContactList.css\";\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className=\"Contact__list\">\n      {contacts.map(({ name, number, id }) => {\n        return (\n          <PhonebookListItem\n            key={id}\n            name={name}\n            number={number}\n            id={id}\n            onDeleteContact={onDeleteContact}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","const Filter = ({ onFilter, filterValue }) => {\n  return (\n    <>\n      <label className=\"Filter\">\n        <p>Find contacts by name:</p>\n        <input\n          name=\"filter\"\n          type=\"text\"\n          onChange={onFilter}\n          value={filterValue}\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","function filterContacts(contacts, filter) {\n  const normalizedFilter = filter.toLowerCase().trim();\n  return contacts.filter((contact) => {\n    return contact.name.toLowerCase().includes(normalizedFilter);\n  });\n}\nexport default filterContacts;\n","import { useState } from 'react'\nimport './App.css'\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport Filter from './components/Filter'\nimport filterContacts from './helpers/filterContacts'\nimport useLocalStorage from './hooks/useLocalStorage'\n\nfunction App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', [])\n  const [filter, setFilter] = useState('')\n\n  const handleAddContact = (contact) => {\n    if (contacts.some((el) => el.name === contact.name)) {\n      alert(contact.name + ' is already in contacts')\n      return\n    }\n    setContacts((prevState) => [...prevState, contact])\n  }\n\n  const handleDeleteContact = (event) => {\n    setContacts(contacts.filter((contact) => contact.id !== event.target.id))\n  }\n\n  const handleFilterContact = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const filteredContacts = filterContacts(contacts, filter)\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm addContact={handleAddContact} />\n      <h2>Contacts</h2>\n      <Filter filterValue={filter} onFilter={handleFilterContact} />\n      <ContactList\n        contacts={filteredContacts}\n        onDeleteContact={handleDeleteContact}\n      />\n    </>\n  )\n}\n\nexport default App\n","import { useState, useEffect } from 'react'\r\n\r\nexport default function useLocalStorage(key, defaultValue) {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue\r\n  })\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state))\r\n  }, [key, state])\r\n\r\n  return [state, setState]\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}